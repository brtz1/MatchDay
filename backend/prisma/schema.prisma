datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/**
 * =========================
 * Base / static structures
 * =========================
 */

model Division {
  id    Int    @id @default(autoincrement())
  name  String
  level Int
  teams Team[]
}

model Coach {
  id            Int    @id @default(autoincrement())
  name          String
  teamId        Int?   @unique
  team          Team?  @relation(fields: [teamId], references: [id])
  morale        Int    @default(75)
  contractWage  Int    @default(10000)
  contractUntil Int
}

model Team {
  id             Int       @id @default(autoincrement())
  name           String
  country        String
  divisionId     Int?
  division       Division? @relation(fields: [divisionId], references: [id])
  stadiumSize    Int       @default(10000)
  ticketPrice    Int       @default(5)
  rating         Int
  players        Player[]
  coach          Coach?
  homeMatches    Match[]   @relation("HomeTeam")
  awayMatches    Match[]   @relation("AwayTeam")
  primaryColor   String    @default("#facc15")
  secondaryColor String    @default("#000000")
  finances       Finance[]
  // Note: gameplay transfers happen on SaveGame* models, not these base Teams.
}

model Player {
  id                      Int                @id @default(autoincrement())
  name                    String
  nationality             String
  position                String
  rating                  Int
  salary                  Int
  behavior                Int                @default(3)
  contractUntil           Int?
  teamId                  Int?
  team                    Team?              @relation(fields: [teamId], references: [id])
  matchStats              PlayerMatchStats[]
  createdAt               DateTime           @default(now())
  lockedUntilNextMatchday Boolean            @default(false)
  // NOTE: live events/stats for gameplay use SaveGamePlayer/SaveGameMatch.
}

model Matchday {
  id         Int          @id @default(autoincrement())
  number     Int
  type       MatchdayType
  isPlayed   Boolean      @default(false)
  roundLabel String?

  season Int @default(1)

  // Scope to a SaveGame
  saveGameId Int
  saveGame   SaveGame @relation(fields: [saveGameId], references: [id])

  // Relations to base and save-game matches
  baseMatches     Match[]         @relation("MatchdayToBaseMatches")
  saveGameMatches SaveGameMatch[] @relation("MatchdayToSaveGameMatches")

  // Optional grouping for events
  events MatchEvent[]
  @@unique([saveGameId, number], name: "matchday_save_number_unique")
}

model Match {
  id         Int      @id @default(autoincrement())
  homeTeamId Int
  awayTeamId Int
  homeTeam   Team     @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeam   Team     @relation("AwayTeam", fields: [awayTeamId], references: [id])
  homeScore  Int?
  awayScore  Int?
  season     Int
  isPlayed   Boolean  @default(false)
  matchdayId Int
  matchday   Matchday @relation("MatchdayToBaseMatches", fields: [matchdayId], references: [id])
  refereeId  Int?
  referee    Referee? @relation(fields: [refereeId], references: [id])

  // Legacy/base events (gameplay uses MatchEvent on SaveGameMatch)
  events      MatchEvent[]       @relation("MatchEvents")
  playerStats PlayerMatchStats[]
  createdAt   DateTime           @default(now())
}

model PlayerMatchStats {
  id       Int    @id @default(autoincrement())
  playerId Int
  player   Player @relation(fields: [playerId], references: [id])
  matchId  Int
  match    Match  @relation(fields: [matchId], references: [id])
  goals    Int    @default(0)
  assists  Int    @default(0)
  yellow   Int    @default(0)
  red      Int    @default(0)
  injuries Int    @default(0)
}

model Referee {
  id         Int     @id @default(autoincrement())
  name       String
  country    String
  strictness Int
  matches    Match[]
}

model Finance {
  id     Int      @id @default(autoincrement())
  teamId Int
  team   Team     @relation(fields: [teamId], references: [id])
  amount Int
  type   String
  reason String
}

model Country {
  id        Int     @id @default(autoincrement())
  code      String  @unique
  iso2      String  @unique
  name      String
  flag      String?
  continent String
}

model BaseTeam {
  id              Int            @id @default(autoincrement())
  name            String
  country         String
  rating          Int
  coachName       String
  primaryColor    String         @default("#facc15")
  secondaryColor  String         @default("#000000")
  players         BasePlayer[]
  saveGameTeams   SaveGameTeam[]
  stadiumCapacity Int?
}

model BasePlayer {
  id              Int              @id @default(autoincrement())
  name            String
  nationality     String
  position        String
  rating          Int
  salary          Int
  behavior        Int              @default(3)
  teamId          Int
  team            BaseTeam         @relation(fields: [teamId], references: [id])
  saveGamePlayers SaveGamePlayer[]
}

/**
 * =========================
 * Save-game / runtime data
 * =========================
 */

model SaveGame {
  id        Int      @id @default(autoincrement())
  name      String
  coachName String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teams     SaveGameTeam[]   @relation("SaveGame_Teams")
  players   SaveGamePlayer[]
  matches   SaveGameMatch[]
  transfers Transfer[]
  matchdays Matchday[]

  coachTeamId Int?          @unique
  coachTeam   SaveGameTeam? @relation("SaveGame_CoachTeam", fields: [coachTeamId], references: [id], onDelete: SetNull)

  @@index([coachTeamId])
}

model SaveGameTeam {
  id            Int          @id @default(autoincrement())
  saveGameId    Int
  baseTeamId    Int
  name          String
  division      DivisionTier
  rating        Int
  morale        Int
  currentSeason Int
  localIndex    Int
  leagueTable   LeagueTable?

  saveGame SaveGame @relation("SaveGame_Teams", fields: [saveGameId], references: [id], onDelete: Cascade)

  coachedSave SaveGame? @relation("SaveGame_CoachTeam")

  baseTeam BaseTeam         @relation(fields: [baseTeamId], references: [id])
  players  SaveGamePlayer[]

  homeMatches SaveGameMatch[] @relation("HomeTeamSave")
  awayMatches SaveGameMatch[] @relation("AwayTeamSave")

  transfersFrom Transfer[] @relation("TransferFromSaveTeam")
  transfersTo   Transfer[] @relation("TransferToSaveTeam")

  gameStates GameState[] @relation("CoachTeamGameState")

  @@unique([saveGameId, localIndex])
}

model SaveGamePlayer {
  id                      Int     @id @default(autoincrement())
  saveGameId              Int
  basePlayerId            Int
  name                    String
  position                String
  rating                  Int
  salary                  Int
  teamId                  Int?
  localIndex              Int?
  contractUntil           Int
  behavior                Int     @default(3)
  lockedUntilNextMatchday Boolean @default(false)
  nationality             String?

  saveGame   SaveGame      @relation(fields: [saveGameId], references: [id])
  basePlayer BasePlayer    @relation(fields: [basePlayerId], references: [id])
  team       SaveGameTeam? @relation(fields: [teamId], references: [id])

  // Live-sim events backref
  events MatchEvent[] @relation("SaveGamePlayerEvents")

  transfers Transfer[]                 @relation("SaveGamePlayerTransfers")
  stats     SaveGamePlayerMatchStats[]
}

model SaveGameMatch {
  id         Int      @id @default(autoincrement())
  saveGameId Int
  saveGame   SaveGame @relation(fields: [saveGameId], references: [id])

  matchdayId Int
  matchday   Matchday @relation("MatchdayToSaveGameMatches", fields: [matchdayId], references: [id])

  homeTeamId Int
  awayTeamId Int
  homeTeam   SaveGameTeam @relation("HomeTeamSave", fields: [homeTeamId], references: [id])
  awayTeam   SaveGameTeam @relation("AwayTeamSave", fields: [awayTeamId], references: [id])

  homeGoals Int @default(0)
  awayGoals Int @default(0)

  // (optional but recommended; many services expect it)
  isPlayed Boolean @default(false)

  state  MatchState?
  events MatchEvent[]

  playerStats SaveGamePlayerMatchStats[]

  @@index([saveGameId])
  @@index([matchdayId])

  @@unique([matchdayId, homeTeamId, awayTeamId], name: "unique_fixture_per_round")
}

model MatchEvent {
  id          Int            @id @default(autoincrement())
  minute      Int
  type        MatchEventType
  description String

  // Primary anchor for gameplay
  saveGameMatchId Int
  saveGameMatch   SaveGameMatch @relation(fields: [saveGameMatchId], references: [id])

  // Optional for quick matchday queries
  matchdayId Int?
  matchday   Matchday? @relation(fields: [matchdayId], references: [id])

  // Optional: player involved (save-game scope)
  saveGamePlayerId Int?
  saveGamePlayer   SaveGamePlayer? @relation("SaveGamePlayerEvents", fields: [saveGamePlayerId], references: [id])

  // Legacy/base link (not used by engine)
  matchId Int?
  match   Match? @relation("MatchEvents", fields: [matchId], references: [id])

  @@index([matchdayId])
  @@index([saveGameMatchId, minute, id])
}

model LeagueTable {
  id           Int          @id @default(autoincrement())
  teamId       Int          @unique
  team         SaveGameTeam @relation(fields: [teamId], references: [id])
  played       Int          @default(0)
  wins         Int          @default(0)
  draws        Int          @default(0)
  losses       Int          @default(0)
  goalsFor     Int          @default(0)
  goalsAgainst Int          @default(0)
  points       Int          @default(0)
}

model Transfer {
  id         Int      @id @default(autoincrement())
  saveGameId Int
  saveGame   SaveGame @relation(fields: [saveGameId], references: [id])

  playerId Int
  player   SaveGamePlayer @relation("SaveGamePlayerTransfers", fields: [playerId], references: [id])

  fromTeamId Int?
  fromTeam   SaveGameTeam? @relation("TransferFromSaveTeam", fields: [fromTeamId], references: [id])

  toTeamId Int
  toTeam   SaveGameTeam @relation("TransferToSaveTeam", fields: [toTeamId], references: [id])

  fee  Int
}

model GameState {
  id                Int           @id @default(1)
  season            Int           @default(1)
  currentMatchday   Int           @default(1)
  coachTeamId       Int?
  coachTeam         SaveGameTeam? @relation("CoachTeamGameState", fields: [coachTeamId], references: [id])
  currentSaveGameId Int
  matchdayType      MatchdayType  @default(LEAGUE)
  gameStage         GameStage     @default(ACTION)

  @@unique([id])
}

model MatchState {
  id              Int           @id @default(autoincrement())
  saveGameMatchId Int           @unique
  saveGameMatch   SaveGameMatch @relation(fields: [saveGameMatchId], references: [id])

  // Formation strings (defaults let you create state first, fill later)
  homeFormation String @default("")
  awayFormation String @default("")

  // On-pitch player IDs (SaveGamePlayer ids)
  homeLineup Int[] @default([])
  awayLineup Int[] @default([])

  // Bench player IDs (SaveGamePlayer ids)
  homeReserves Int[] @default([])
  awayReserves Int[] @default([])

  homeSubsMade Int     @default(0)
  awaySubsMade Int     @default(0)
  isPaused     Boolean @default(false)

  subsRemainingHome Int @default(3)
  subsRemainingAway Int @default(3)
}

model SaveGamePlayerMatchStats {
  id               Int            @id @default(autoincrement())
  saveGamePlayerId Int
  saveGamePlayer   SaveGamePlayer @relation(fields: [saveGamePlayerId], references: [id])

  saveGameMatchId Int
  saveGameMatch   SaveGameMatch @relation(fields: [saveGameMatchId], references: [id])

  goals    Int @default(0)
  assists  Int @default(0)
  yellow   Int @default(0)
  red      Int @default(0)
  injuries Int @default(0)

  @@unique([saveGamePlayerId, saveGameMatchId])
  @@index([saveGamePlayerId])
  @@index([saveGameMatchId])
}

/**
 * =========================
 * Enums
 * =========================
 */

enum MatchdayType {
  LEAGUE
  CUP
}

enum GameStage {
  ACTION
  MATCHDAY
  HALFTIME
  RESULTS
  STANDINGS
  PENALTIES
}

enum DivisionTier {
  D1
  D2
  D3
  D4
  DIST
}

enum MatchEventType {
  GOAL
  RED
  INJURY
}
